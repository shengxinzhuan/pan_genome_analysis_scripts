"""
Usage:
  cds_depth_analyzer.py <gff_file> <depth_file> [--threshold-ratio=0.6] [--output-prefix=OUTPUT]
"""

import sys
import gzip
import argparse
import pandas as pd
from collections import defaultdict

#def parse_gff(gff_path):
#    """Parsing of GFF files to return a CDS-to-mRNA mapping dictionary"""
#    cds_mapping = defaultdict(list)
#    current_parent = None
#    
#    with gzip.open(gff_path, 'rt') if gff_path.endswith('.gz') else open(gff_path) as f:
#        for line in f:
#            if line.startswith('#'):
#                continue
#            parts = line.strip().split('\t')
#            if len(parts) < 9 or parts[2] not in ('CDS', 'mRNA'):
#                continue
#
#            attrs = {k:v for k,v in [item.split('=') for item in parts[8].split(';') if '=' in item]}
#            
#            if parts[2] == 'mRNA':
#                current_parent = attrs.get('ID', None)
#            elif parts[2] == 'CDS' and current_parent:
#                cds_id = f"{attrs.get('ID', 'unknown')}|{parts[0]}:{parts[3]}-{parts[4]}"
#                cds_mapping[cds_id] = current_parent
#    return cds_mapping

def parse_gff(gff_path):
    """Parsing of GFF files to return a CDS-to-mRNA mapping dictionary"""
    cds_mapping = {}
    current_mrna = None
    cds_counter = defaultdict(int) 
    
    with gzip.open(gff_path, 'rt') if gff_path.endswith('.gz') else open(gff_path) as f:
        for line in f:
            if line.startswith('#'):
                continue
            parts = line.strip().split('\t')
            if len(parts) < 9:
                continue

            # create dict
            attrs = dict(item.split("=") for item in parts[8].split(";") if "=" in item)
            
            # mRNA line
            if parts[2] == 'mRNA':
                current_mrna = attrs.get('ID', '').split('.')[0]
                continue
                
            # CDS line
            if parts[2] == 'CDS' and current_mrna:
                cds_counter[current_mrna] += 1
                cds_id_in_bed = f"{current_mrna}.mRNA1_CDS{cds_counter[current_mrna]}"
                cds_mapping[cds_id_in_bed] = f"{current_mrna}.mRNA1"
    
    return cds_mapping


def main():
    parser = argparse.ArgumentParser(description='CDS integrity analysis scripts in BAM files')
    parser.add_argument('gff_file', help='Input GFF3 file path (supports gzip compression)')
    parser.add_argument('depth_file', help='Path to regions.bed.gz file generated by MOSdepth')
    parser.add_argument('--threshold-ratio', type=float, default=0.6,
                       help='Percentage of thresholds determined to be missing,default:0.6')
    parser.add_argument('-o', '--output-prefix', default='output',
                       help='Output file prefix, default: output')
    args = parser.parse_args()

    # Step 1: dissecting the correspondence between CDS and mRNA obtained by GFF
    print("Parsing GFF file...")
    cds2mrna = parse_gff(args.gff_file)
    print(f"Loaded {len(cds2mrna)} CDS records")

    # Step 2: read MOSDEPTH depth information
    print("Processing depth file...")
    df = pd.read_csv(args.depth_file, sep='\t', header=None, 
                     names=['chr','start','end','cds_id','depth'])
    df['length'] = df['end'] - df['start']
    
    # calculate weighted depth
    total_depth = (df['depth'] * df['length']).sum()
    total_length = df['length'].sum()
    global_avg = total_depth / total_length
    threshold = global_avg * args.threshold_ratio
    print(f"Global avg depth: {global_avg:.2f}, Threshold: {threshold:.2f}")

    # Step 3: merge GFF detail information and generate report
    df['mRNA_ID'] = df['cds_id'].map(lambda x: cds2mrna.get(x, 'unknown'))
    df['IsMissing'] = df['depth'] < threshold

    # generate CDS summary report
    df[['cds_id', 'depth', 'IsMissing', 'length']].to_csv(
        f"{args.output_prefix}_cds_detail.csv", index=False
    )
    df[['cds_id', 'depth', 'IsMissing', 'length']].to_csv(
        f"{args.output_prefix}_cds_detail.tsv", sep = '\t',index=False
    )
    print(f"Saved CDS report: {args.output_prefix}_cds_detail.csv")

    # generate mRNA summary report
    mrna_report = df.groupby('mRNA_ID').agg(
        Total_CDS=('IsMissing', 'size'),
        Valid_CDS=('IsMissing', lambda x: sum(~x)),
        Total_Length=('length', 'sum'),
        Weighted_Depth=('depth', lambda x: (x * df.loc[x.index, 'length']).sum() / df.loc[x.index, 'length'].sum())
    ).reset_index()
    mrna_report['Integrity'] = mrna_report['Valid_CDS'] / mrna_report['Total_CDS']
    mrna_report.to_csv(f"{args.output_prefix}_mRNA_summary.csv", index=False, float_format='%.4f')
    mrna_report.to_csv(f"{args.output_prefix}_mRNA_summary.tsv", sep='\t',index=False, float_format='%.4f')
    print(f"Saved mRNA report: {args.output_prefix}_mRNA_summary.csv")

if __name__ == '__main__':
    main()

